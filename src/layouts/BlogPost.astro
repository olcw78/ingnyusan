---
import Layout from "./Layout.astro";
import type { Blog } from "../types";
import CategoryItem from "@/components/category/CategoryItem.astro";
import { markdown } from "@astropub/md";
import CheckSecretModal from "@/components/secret/CheckSecretModal";
import getReadingTime from "reading-time";
import { formatDate } from "@/util/date";
import Divider from "@/components/Divider.astro";

type Props = Blog;
const blog: Blog = Astro.props;

const {
  title,
  publishedAt,
  content,
  categories,
  isPrivate,
  password: matchingPassword,
} = blog;

const date = formatDate(publishedAt);

const mergedContents = content?.flatMap(({ children }) =>
  children?.map(({ text }) => text)
)!;

const markdownSrc = mergedContents.reduce((p, c) => p + c + "\n", "");
const md = await markdown(markdownSrc, {
  syntaxHighlight: "shiki",
  shikiConfig: {
    theme: "dark-plus",
  },
});

const readingTimeResult = getReadingTime(mergedContents.join(""));
const minutes = Math.round(readingTimeResult.minutes);
---

<Layout>
  {
    isPrivate && (
      <CheckSecretModal title={title} matchingPassword={matchingPassword} />
    )
  }

  <article class="max-sm:px-6 px-20">
    <h1 class="mb-[50px] mt-1 text-4xl">{title}</h1>

    <div class="flex flex-col justify-center gap-3 mb-[20px]">
      <div class="flex items-center">
        <p class="text-slate-500">출판일자&nbsp;</p>
        <time class="text-slate-700 text-lg">{date}</time>
      </div>

      <p class="text-slate-500">
        읽는 데 걸리는 시간
        <span class="text-slate-700 text-lg">{minutes}분</span>
      </p>
    </div>

    <ul
      class="mb-3 flex flex-row gap-0.5 items-center max-sm:flex-col max-sm:items-baseline"
    >
      {
        categories?.map((category) => (
          <CategoryItem category={category} isTextOnly />
        ))
      }
    </ul>

    <Divider />

    <article
      id="md-root"
      class="min-h-[90vh] mt-20 leading-8 break-words"
      set:html={md}
    />

    <Divider />

    <slot />
  </article>
</Layout>

<script>
  const checkSecretModalRootElement = document.getElementById(
    "check-secret-modal"
  ) as HTMLDivElement;

  const unlockButtonElement = document.getElementById(
    "secret-unlock-button"
  ) as HTMLButtonElement;

  unlockButtonElement.addEventListener("click", function (event) {
    event.preventDefault();
    console.log("click unlock!");

    if (checkSecretModalRootElement.classList.contains("visible")) {
      checkSecretModalRootElement.classList.replace("visible", "hidden");
    }
  });
</script>
